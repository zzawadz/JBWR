\documentclass{tufte-handout}
\usepackage[utf8]{inputenc}
\usepackage{tcolorbox}
\usepackage{graphicx}

\title{Jeden by wszystkimi rządzić - kontrola nad konsolą systemową.}

\author{Zygmunt Zawadzki}

\begin{document}

\newcommand{\awk}{\textbf{awk }}

\maketitle

\tableofcontents

<<r setup, include=FALSE,cache=FALSE>>=
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
options(width = 45)
@

<<engine='awk', engine.opts=shQuote('ping.txt'), size="small">>=
{print $0}
@

Wykonanie kodu tylko dla określonych linijek:
<<engine='awk', engine.opts=shQuote('ping.txt'), size="small">>=
/Reply/ {print $0}
@

Znalezienie pierwszej linijki pasującej do wyrażenia:
<<engine='awk', engine.opts=shQuote('ping.txt'), size="small">>=
/Reply/ {print $0; exit;}
@

Podział pola:

Znalezienie pierwszej linijki pasującej do wyrażenia:
<<engine='awk', engine.opts=shQuote('ping.txt'), size="small">>=
/Reply/ {print $3,$5}
@

Znalezienie pierwszej linijki pasującej do wyrażenia:
<<engine='awk', engine.opts=shQuote('ping.txt'), size="small">>=
/Reply/ {
  gsub(":", ""); 
  gsub("time=", "");
  gsub("ms", "");
  print $3,$5}
@


\section{\awk w R}

\subsection{system2 - konsola systemowa w R.}

Do tej pory wywołania \awk odbywały się z konsoli systemowej. Jak jednak sprawić by wywołać \awk z poziomu R? Bezpośrednie wywołanie \awk jest niemożliwe, gdyż R nawet nie wie, że taki program jest zainstalowany. Jednak R udostępnia możliwość wywołania dowolnej komendy systemowaj przy pomocy \textbf{system2}:



\begin{tcolorbox}[width=\textwidth,colback={YellowGreen},outer arc=0mm] 
Potrzebna składnia system2:

\begin{itemize}
\item command - nazwa komendy którą będziemy wywoływać.
\item args - dodatkowe argumenty
\item stdout - określa miejsce do którego ma być skierowany wynik. Domyślnie wynik zostanie wypisany w konsoli R. Wartość TRUE oznacza, że R przechwyci go jako wektor, podanie nazwy pliku spowoduje zapisanie do niego wyniku działania komendy.
\end{itemize}
\end{tcolorbox}    

Poniżej proste wywołanie systemowej funkcji \textbf{wc}: \marginnote{\textbf{wc} - to proste narzędzie zwracające dla zadanego pliku trzy liczby - ilość linii, słów i bajtów.}
<<>>=
system2("wc", args = "ping.txt", stdout = TRUE)
@

\subsection{Pierwsze wywołanie \awk w R}

<<>>=
system2("awk", 
        args = "-e '/Reply/ {print $0}' ping.txt", 
        stdout = TRUE)
@

\subsection{Opakowanie w funkcję}

<<>>=
awk = function(file, code, stdout = TRUE)
{
  args = sprintf("-e '%s' %s", code, file)
  
  system2("awk", 
        args = args, 
        stdout = stdout)
}

awk(code = '/Reply/ {print $0}',
    file = "ping.txt")

@

\section{Funckja zwracająca funckję}

W R funkcja może zwrócić funkcję.

<<>>=
make_sqr = function()
{
  function(x) x*x
}

sqr = make_sqr()
sqr(2)
@

Najważniejsza cechą tego mechanizmu jest to, że funkcja będąca rezultatem zapamiętuje wszystkie zmienne powstałe w trakcie działania funkcji która ją stworzyła (również argumenty funkcji-matki). Z tego też powodu możliwe są konstrukcje takie jak poniżej\footnote{Taka funkcja zwrócona przez funkcję jest nazywana \textbf{closure}.}:

<<>>=
make_pow = function(n)
{
  function(x) x^n
}

pow3 = make_pow(3)
pow3(2)
pow3(5)
make_pow(10)(2)
@


Co więcej - z poziomu wynikowej funckji możliwa jest modyfikacja parametrów closure:

<<>>=
counter = function()
{
  i = 0;
  function() 
  {
    # by zmodyfikowac wartosc i
    # nalezy uzyc operatora 
    # <<-
    i <<- i + 1
    i
  }
}

ct = counter()
ct()
ct()
ct()
@


\marginnote{Iteratorem w R będzie funkcja bez żadnych argumentów zwracająca kolejne elementy wektora. Koniecznie sprawdź pakiet \textbf{iterators} - bywa bardzo przydatny!}

\begin{tcolorbox}[width=\textwidth,colback={YellowGreen},outer arc=0mm] 
<<iterator,include=FALSE>>=
iter = function(x)
{
  i = 0;
  function()
  {
    i <<- i + 1
    x[[i]]
  }
}
@

Napisz funkcję \textbf{iter} która zwraca iterator dla zadanego wektora, tak by poniższy kod wykonywał się poprawnie: 

<<>>=
x = c("Ala", "Ela","Ola")
it = iter(x)
it()
it()
it()
@

\end{tcolorbox}

\subsection{Wykorzystanie funkcji zwracającej funckję w interfejsie do awk}

<<ffawk>>=
make_awk = function(code)
{
  function(file, stdout = TRUE)
  {
    args = sprintf("-e '%s' %s", code, file)
    
    system2("awk", 
          args = args, 
          stdout = stdout)
  }
}

first_column = make_awk('{print $1}')
first_column("ping.txt")

@

\section{Zadanie - pingowanie strony}

<<pingr>>=
ping = function(site, 
                pingFile = tempfile(), 
                awkFile = tempfile())
{
    parse_ping = make_awk(
  '/Reply/ {
    gsub(":", ""); 
    gsub("time=", "");
    gsub("ms", "");
    print $3,$5}
  ')
  
  system2("ping", args = site, stdout = pingFile)
  parse_ping("pingg.txt", stdout = awkFile)
  read.delim(awkFile, sep = " ", header = FALSE)
}

ping("www.google.pl")

@

\section{Podsumowanie}

By móc łatwo stworzyć interface do potrzebengo programu wystarczy, by był on możliwy do wykonania z poziomu konsoli systemowej. Wtedy wystarczy tylko za pomocą kodu w R zbudować odpowiednie wywołanie i wykorzystać interface \textbf{system2}. Oczywiście jeżeli wynikiem działania programu jest jakiś plik, wtedy potrzeba jeszcze przygotować odpowiedni kod wczytujący go do R. Ale to już inna historia...


\end{document}
